// Generated by Dagger (https://dagger.dev).
package data.remote;

import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import data.remote.api.ApiAppService;
import javax.inject.Provider;
import kotlinx.coroutines.CoroutineDispatcher;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class NewsRemoteDataSource_Factory implements Factory<NewsRemoteDataSource> {
  private final Provider<ApiAppService> apiAppServiceProvider;

  private final Provider<CoroutineDispatcher> dispatcherProvider;

  public NewsRemoteDataSource_Factory(Provider<ApiAppService> apiAppServiceProvider,
      Provider<CoroutineDispatcher> dispatcherProvider) {
    this.apiAppServiceProvider = apiAppServiceProvider;
    this.dispatcherProvider = dispatcherProvider;
  }

  @Override
  public NewsRemoteDataSource get() {
    return newInstance(apiAppServiceProvider.get(), dispatcherProvider.get());
  }

  public static NewsRemoteDataSource_Factory create(Provider<ApiAppService> apiAppServiceProvider,
      Provider<CoroutineDispatcher> dispatcherProvider) {
    return new NewsRemoteDataSource_Factory(apiAppServiceProvider, dispatcherProvider);
  }

  public static NewsRemoteDataSource newInstance(ApiAppService apiAppService,
      CoroutineDispatcher dispatcher) {
    return new NewsRemoteDataSource(apiAppService, dispatcher);
  }
}
