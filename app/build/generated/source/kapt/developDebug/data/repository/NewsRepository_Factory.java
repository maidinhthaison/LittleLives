// Generated by Dagger (https://dagger.dev).
package data.repository;

import dagger.internal.Factory;
import data.local.AppLocalDataSource;
import data.remote.NewsRemoteDataSource;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class NewsRepository_Factory implements Factory<NewsRepository> {
  private final Provider<AppLocalDataSource> appLocalDataSourceProvider;

  private final Provider<NewsRemoteDataSource> remoteDataSourceProvider;

  public NewsRepository_Factory(Provider<AppLocalDataSource> appLocalDataSourceProvider,
      Provider<NewsRemoteDataSource> remoteDataSourceProvider) {
    this.appLocalDataSourceProvider = appLocalDataSourceProvider;
    this.remoteDataSourceProvider = remoteDataSourceProvider;
  }

  @Override
  public NewsRepository get() {
    return newInstance(appLocalDataSourceProvider.get(), remoteDataSourceProvider.get());
  }

  public static NewsRepository_Factory create(
      Provider<AppLocalDataSource> appLocalDataSourceProvider,
      Provider<NewsRemoteDataSource> remoteDataSourceProvider) {
    return new NewsRepository_Factory(appLocalDataSourceProvider, remoteDataSourceProvider);
  }

  public static NewsRepository newInstance(AppLocalDataSource appLocalDataSource,
      NewsRemoteDataSource remoteDataSource) {
    return new NewsRepository(appLocalDataSource, remoteDataSource);
  }
}
