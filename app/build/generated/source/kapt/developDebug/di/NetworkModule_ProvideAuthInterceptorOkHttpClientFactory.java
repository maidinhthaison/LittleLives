// Generated by Dagger (https://dagger.dev).
package di;

import dagger.internal.Factory;
import dagger.internal.Preconditions;
import data.remote.api.interceptor.AppInterceptor;
import javax.inject.Provider;
import okhttp3.OkHttpClient;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class NetworkModule_ProvideAuthInterceptorOkHttpClientFactory implements Factory<OkHttpClient> {
  private final Provider<AppInterceptor> authInterceptorProvider;

  public NetworkModule_ProvideAuthInterceptorOkHttpClientFactory(
      Provider<AppInterceptor> authInterceptorProvider) {
    this.authInterceptorProvider = authInterceptorProvider;
  }

  @Override
  public OkHttpClient get() {
    return provideAuthInterceptorOkHttpClient(authInterceptorProvider.get());
  }

  public static NetworkModule_ProvideAuthInterceptorOkHttpClientFactory create(
      Provider<AppInterceptor> authInterceptorProvider) {
    return new NetworkModule_ProvideAuthInterceptorOkHttpClientFactory(authInterceptorProvider);
  }

  public static OkHttpClient provideAuthInterceptorOkHttpClient(AppInterceptor authInterceptor) {
    return Preconditions.checkNotNullFromProvides(NetworkModule.INSTANCE.provideAuthInterceptorOkHttpClient(authInterceptor));
  }
}
